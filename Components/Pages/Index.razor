@page "/"
@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Models.JSON;
@using AIStoryBuilders.Services;
@using AIStoryBuildersOnline.Components.Pages.Controls;
@using AIStoryBuildersOnline.Components.Pages.Controls.Story;
@using Newtonsoft.Json;
@using System.Text
@using System.IO.Compression
@using Radzen
@using Radzen.Blazor
@using static AIStoryBuilders.AI.OrchestratorMethods
@using static AIStoryBuilders.Services.AIStoryBuildersService;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject SettingsService SettingsService
@inject AIStoryBuildersStoryService AIStoryBuildersStoryService
@implements IDisposable
<PageTitle>AI Story Builders</PageTitle>
<RadzenMenu>
    @if (ApiKey.Length > 10)
    {
        <RadzenMenuItem Click="OnHomeClicked" Text="Home" Icon="home"></RadzenMenuItem>
        <RadzenMenuItem Click="OnLogsClicked" Text="Logs" Icon="assignment"></RadzenMenuItem>
        <RadzenMenuItem Click="OnUtilityClicked" Text="Utility" Icon="aspect_ratio"></RadzenMenuItem>
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
    else
    {
        <RadzenMenuItem Click="OnSettingsClicked" Text="Settings" Icon="line_style"></RadzenMenuItem>
    }
</RadzenMenu>
<br />
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
@if (HomeVisible)
{
    <RadzenButton Click=@(() => NewStory()) Text="New Story" Icon="add" ButtonStyle="ButtonStyle.Success" />
    <span>&nbsp; &nbsp;</span>
    <RadzenButton Click=@(() => ImportStory()) Text="Import Story" Icon="publish" ButtonStyle="ButtonStyle.Light" />
    <br />
    <br />
    <div style="height:500px">
        <RadzenDataList AllowVirtualization=false Style="height:100%;overflow:auto;"
                        WrapItems=true AllowPaging=false
                        Data="@colStorys" TItem="Story">
            <Template Context="story">
                <RadzenCard Style="width: 100%; padding: 1;">
                    <RadzenRow Gap="0">
                        <RadzenButton Text="Select" Click=@(() => EditStory(story))
                                      ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        <RadzenText TextStyle="TextStyle.DisplayH5"
                                    class="rz-color-secondary">@(story.Title)</RadzenText>&nbsp;&nbsp;
                    </RadzenRow>
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </div>
}
@if (SettingsVisible)
{
    <Settings SettingsChanged="HandleSettingsChanged"></Settings>
}
@if (LogsVisible)
{
    <Logs></Logs>
}
@if (UtilityVisible)
{
    <UtilityClass></UtilityClass>
}
@code {
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    LogService LogService;

    List<Story> colStorys = new List<Story>();
    Story objStory = new Story();

    string Organization = "";
    string ApiKey = "";

    bool InProgress = false;
    bool HomeVisible = true;
    bool SettingsVisible = false;
    bool LogsVisible = false;
    bool UtilityVisible = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
            LogService = (LogService)ScopedServices.GetService(typeof(LogService));

            AIStoryBuildersService.TextEvent += AIStoryBuildersService_TextEvent;
            OrchestratorMethods.ReadTextEvent += OrchestratorMethods_ReadTextEvent;

            await SettingsService.LoadSettingsAsync();
            Organization = SettingsService.Organization;
            ApiKey = SettingsService.ApiKey;

            if ((ApiKey == "") || (ApiKey.Length < 10))
            {
                // Switch to the Settings page
                HomeVisible = false;
                SettingsVisible = true;
                LogsVisible = false;
            }
            else
            {
                // Get the Storys from the database
                colStorys = await AIStoryBuildersService.GetStorys();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            await LogService.WriteToLogAsync(ex.Message);
        }
    }

    private async Task NewStory()
    {
        try
        {
            var NewStoryResult = await dialogService.OpenAsync<AIStoryBuildersOnline.Components.Pages.Controls.Story.NewStory>($"New Story",
                null,
                new DialogOptions() { Width = "650px" });

            if (NewStoryResult != null)
            {
                objStory = (Story)NewStoryResult;

                if (objStory != null)
                {
                    HomeVisible = false;
                    InProgress = true;
                    StateHasChanged();

                    // Add SystemMessage to the Story
                    objStory.Theme = "You are a software program that creates prose for novels. Use the following style sheet: Foreshadowing: Do not have any foreshadowing as to events that have not yet happened. Third-person Limited: The narrative is primarily from the limited perspective of specific characters, offering insights into their thoughts and feelings. The point of view may switch between characters but stays closely aligned with one at a time.";

                    // Save Story to the database
                    await AIStoryBuildersService.AddStory(objStory, objStory.ModelId);

                    HomeVisible = true;
                    InProgress = false;
                    StateHasChanged();

                    var parms = new Dictionary<string, object>();
                    objStory.Id = 0; // So we know it is no longer new;
                    parms.Add("objStory", objStory);

                    var EditStoryResult = await dialogService.OpenAsync<StoryControl>($"{objStory.Title}", parms,
                    new DialogOptions() { Height = "650px", Width = "950px" });
                }

                colStorys = await AIStoryBuildersService.GetStorys();

                StateHasChanged();

                HomeVisible = true;
                InProgress = false;
            }
        }
        catch (Exception ex)
        {
            HomeVisible = true;
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            await LogService.WriteToLogAsync(ex.Message);
        }
    }

    private async Task ImportStory()
    {
        try
        {
            var EditStoryResult = await dialogService.OpenAsync<ImportStoryControl>($"Import Story", null,
            new DialogOptions() { Height = "210px", Width = "350px" });

            colStorys = await AIStoryBuildersService.GetStorys();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            HomeVisible = true;
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            await LogService.WriteToLogAsync(ex.Message);
        }
    }

    private async Task EditStory(Story paramStory)
    {
        try
        {
            if (paramStory.Id == -1)
            {
                // It is a New Story and needs processing
                // Show the Progress bar
                InProgress = true;
            }

            // Get the Zip file from the database
            await AIStoryBuildersStoryService.LoadAIStoryBuildersStoriesAsync();
            var ColStories = AIStoryBuildersStoryService.colAIStoryBuildersStory;

            // Find the Story
            var objSelectedStory = ColStories.Where(x => x.Title == paramStory.Title).FirstOrDefault();

            // Get the .Zip file
            var ZipFileContents = objSelectedStory.ZipFile;

            if (ZipFileContents == null)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "The Story is corrupted. Deleting Story",
                        Duration = 4000
                    });

                InProgress = false;

                // Delete the Story from the database
                await AIStoryBuildersService.DeleteStory(paramStory.Title);

                return;
            }

            // Extract the Zip file ****************************************************
            string BasePath = $"AIStoryBuilders/{paramStory.Title}";
            string extractPath = @"/TempZip";

            // Delete the directories if they exists
            if (Directory.Exists(BasePath))
            {
                Directory.Delete(BasePath, true);
            }

            if (Directory.Exists(extractPath))
            {
                Directory.Delete(extractPath, true);
            }

            // Create the directories
            Directory.CreateDirectory(BasePath);

            Directory.CreateDirectory(extractPath);

            // Convert the Base64 string to a byte array
            byte[] exportFileBytes = Convert.FromBase64String(ZipFileContents);

            // Write the byte array to a file
            await File.WriteAllBytesAsync($"{extractPath}/ZipFiles.zip", exportFileBytes);

            // Extract the zip file
            ZipFile.ExtractToDirectory($"{extractPath}/ZipFiles.zip", BasePath);

            var parms = new Dictionary<string, object>();
            parms.Add("objStory", paramStory);

            var EditStoryResult = await dialogService.OpenAsync<StoryControl>($"{paramStory.Title}", parms,
            new DialogOptions() { Height = "720px", Width = "950px" });

            if (paramStory != null)
            {
                try
                {
                    // Zip up any files and store in LocalStorage
                    string ZipFileBase64String = CreateZipFile($"{BasePath}");

                    await AIStoryBuildersStoryService.LoadAIStoryBuildersStoriesAsync();

                    // Get the Story from the database
                    var objStory = AIStoryBuildersStoryService.colAIStoryBuildersStory.Where(x => x.Title == paramStory.Title).FirstOrDefault();

                    await AIStoryBuildersStoryService.UpdateStoryAsync(new AIStoryBuildersStory
                        {
                            Id = objStory.Id,
                            Title = objStory.Title,
                            Style = objStory.Style,
                            Theme = objStory.Theme,
                            Synopsis = objStory.Synopsis,
                            ZipFile = ZipFileBase64String
                        });
                }
                catch
                {
                    // Story could have been deleted
                }
            }

            colStorys = await AIStoryBuildersService.GetStorys();

            StateHasChanged();

            InProgress = false;
        }
        catch (Exception ex)
        {
            InProgress = false;

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });

            await LogService.WriteToLogAsync(ex.Message);
        }
    }

    void OnHomeClicked(MenuItemEventArgs args)
    {
        HomeVisible = true;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnSettingsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = true;
        UtilityVisible = false;
        LogsVisible = false;
    }

    void OnLogsClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = false;
        LogsVisible = true;
    }

    void OnUtilityClicked(MenuItemEventArgs args)
    {
        HomeVisible = false;
        SettingsVisible = false;
        UtilityVisible = true;
        LogsVisible = false;
    }

    // Events

    private void OrchestratorMethods_ReadTextEvent(object sender, EventArgs e)
    {
        ReadTextEventArgs ReadTextEventArguments = (ReadTextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "",
                Detail = ReadTextEventArguments.Message,
                Duration = (ReadTextEventArguments.DisplayLength * 1000)
            });
    }

    private void AIStoryBuildersService_TextEvent(object sender, EventArgs e)
    {
        TextEventArgs TextEventArguments = (TextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "",
                Detail = TextEventArguments.Message,
                Duration = (TextEventArguments.DisplayLength * 1000)
            });
    }

    private async Task HandleSettingsChanged()
    {
        await SettingsService.LoadSettingsAsync();
        Organization = SettingsService.Organization;
        ApiKey = SettingsService.ApiKey;

        // If there is a key show the Home page
        if (ApiKey.Length > 10)
        {
            HomeVisible = true;
            SettingsVisible = false;
            UtilityVisible = false;
            LogsVisible = false;
        }
    }

    // Utility

    public string CreateZipFile(string storyPath)
    {
        string strZipFile = "";

        // Create _TempZip
        string tempZipPath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIStoryBuilders/_TempZip";

        if (!Directory.Exists(tempZipPath))
        {
            Directory.CreateDirectory(tempZipPath);
        }
        else
        {
            // Delete the temp directory
            Directory.Delete(tempZipPath, true);

            // Create the directory if it doesn't exist
            if (!Directory.Exists(tempZipPath))
            {
                Directory.CreateDirectory(tempZipPath);
            }
        }

        string zipFilePath = $"{tempZipPath}/ZipFile.zip";

        // Create a zip file from the directory
        ZipFile.CreateFromDirectory(storyPath, zipFilePath);

        // Read the Zip file into a byte array
        byte[] zipFileContents = File.ReadAllBytes(zipFilePath);

        // Convert ZipFile byte array to Base64 string
        strZipFile = Convert.ToBase64String(zipFileContents);

        return strZipFile;
    }

    public void Dispose()
    {
        OrchestratorMethods.ReadTextEvent -= OrchestratorMethods_ReadTextEvent;
        AIStoryBuildersService.TextEvent -= AIStoryBuildersService_TextEvent;
    }
}