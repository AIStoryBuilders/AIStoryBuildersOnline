@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Timeline Name:" Variant=Variant.Outlined>
                    <RadzenTextBox MaxLength="200" @bind-Value="@objTimeline.TimelineName" />
                </RadzenFormField>
                <RadzenFormField Text="Description:" Variant=Variant.Outlined>
                    <RadzenTextArea Rows="2" MaxLength="200" @bind-Value="@objTimeline.TimelineDescription" class="w-100" />
                </RadzenFormField>
            </RadzenStack>
            <RadzenRow Style="margin-top:10px">
                <RadzenColumn Size="5" Offset="1">
                    <RadzenFormField Text="Start:" Variant=Variant.Outlined>
                        <RadzenDatePicker AllowClear=false @bind-Value=objTimeline.StartDate />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="5">
                    <RadzenFormField Text="Stop:" Variant=Variant.Outlined>
                        <RadzenDatePicker AllowClear=true @bind-Value=objTimeline.StopDate />
                    </RadzenFormField>
                </RadzenColumn>
            </RadzenRow>
        </RadzenColumn>
    </RadzenRow>
    <br />
    <div class="row">
        <div class="col">
            <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                          Click="TimelineSave"
                          Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
            @if (objTimeline.Id > 0)
            {
                <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                              Click="TimelineDelete" />
            }
        </div>
    </div>
}
@code {
    [Parameter] public Timeline objTimeline { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    bool InProgress = false;
    string TimelineNameOriginal;

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            TimelineNameOriginal = objTimeline.TimelineName;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task TimelineSave()
    {
        try
        {
            if (objTimeline.TimelineName != null)
            {
                // Validate Timeline Name
                if (objTimeline.TimelineName.Length < 1)
                {
                    NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Timeline Name is required",
                            Duration = 4000
                        });
                    return;
                }

                // Validate Start Date is not null
                if (!objTimeline.StartDate.HasValue)
                {
                    NotificationService.Notify(
                    new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Start Date is required",
                            Duration = 4000
                        });
                    return;
                }

                // Validate Start Date is not after Stop Date
                if (objTimeline.StopDate != null)
                {
                    if (objTimeline.StartDate >= objTimeline.StopDate)
                    {
                        NotificationService.Notify(
                        new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Start Date must be before Stop Date",
                                Duration = 4000
                            });
                        return;
                    }
                }

                if (objTimeline.Id == -1)
                {
                    // Add to the database
                    AIStoryBuildersService.AddTimeline(objTimeline);
                }
                else
                {
                    // Detect that the name is being updated
                    if (objTimeline.TimelineName != TimelineNameOriginal)
                    {
                        // Ask for confirmation:
                        var confirmResult = await dialogService.Confirm("Are you sure? The entire story will be updated to update the Timeline name.", "Timeline Name Change",
                              new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

                        if (confirmResult.HasValue && confirmResult.Value)
                        {
                            InProgress = true;
                            StateHasChanged();

                            // Update the name
                            await AIStoryBuildersService.UpdateTimelineAndTimelineNameAsync(objTimeline, TimelineNameOriginal);

                            InProgress = false;
                            StateHasChanged();
                        }
                    }
                    else
                    {
                        // Update the database
                        AIStoryBuildersService.UpdateTimeline(objTimeline, TimelineNameOriginal);
                    }
                }

                dialogService.Close(null);
            }
            else
            {
                NotificationService.Notify(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Timeline Name is required",
                        Duration = 4000
                    });
                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task TimelineDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure? The entire story will be updated to remove the Timeline.", "Delete Timeline",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                InProgress = true;
                StateHasChanged();

                // Delete from the database
                await AIStoryBuildersService.DeleteTimelineAndTimelineNameAsync(objTimeline, TimelineNameOriginal);

                InProgress = false;
                StateHasChanged();

                dialogService.Close(null);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}