@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<br />
<br />
@code {
    [Parameter] public Story objStory { get; set; }
    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<Character> colCharacters = new List<Character>();

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

}