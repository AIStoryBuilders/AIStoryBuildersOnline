@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
<RadzenButton Click=@(() => NewLocation()) Text="New Location" ButtonStyle="ButtonStyle.Success" />
<br />
<br />
    <RadzenDataList @ref=LocationDataList AllowVirtualization=false Style="height:100%;overflow:auto;"
                WrapItems=true AllowPaging=false
                Data="@colLocations" TItem="Location">
    <Template Context="Location">
        <RadzenCard Style="width: 100%; padding: 1;">
            <RadzenRow Gap="0">
                <RadzenButton Text="Edit" Click=@(() => EditLocation(Location))
                              ButtonStyle="ButtonStyle.Light" Style="width: 150px;height: 20px" />
                &nbsp;&nbsp;&nbsp;&nbsp;
                <RadzenText TextStyle="TextStyle.DisplayH5"
                            class="rz-color-secondary">@(Location.LocationName)</RadzenText>&nbsp;&nbsp;
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    }
@code {
    [Parameter] public Story objStory { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    RadzenDataList<Location> LocationDataList;

    bool InProgress = false;
    List<Location> colLocations = new List<Location>();

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            LoadLocations(objStory);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    public void LoadLocations(Story paramStory)
    {
        colLocations = AIStoryBuildersService.GetLocations(paramStory);

        if (dialogService != null)
        {
            dialogService.Refresh();
        }

        if (LocationDataList != null)
        {
            LocationDataList.Reload();            
        }
    }

    private async Task NewLocation()
    {
        try
        {
            var newLocation = new Location();
            newLocation.Id = -1; // So we know it is new
            newLocation.Story = objStory;
            newLocation.LocationDescription = new List<LocationDescription>();

            var EditStoryResult = await dialogService.OpenAsync(
                "New Location", ds =>
                @<LocationEdit objLocation=newLocation objOrginalLocation=newLocation DialogReference="ds"></LocationEdit>
                , new DialogOptions() { Height = "250px", Width = "650px" });

            LoadLocations(objStory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task EditLocation(Location paramLocation)
    {
        try
        {
            // Add the story to the location so it 
            // is available in the edit screen
            paramLocation.Story = objStory;

            var EditStoryResult = await dialogService.OpenAsync(
            "Edit Location", ds =>
            @<LocationEdit objLocation=paramLocation objOrginalLocation=paramLocation DialogReference="ds"></LocationEdit>
            , new DialogOptions() { Height = "500px", Width = "650px" });

            LoadLocations(objStory);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}