@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services
@using static AIStoryBuilders.AI.OrchestratorMethods
@inherits OwningComponentBase
<div Style="height:170px;overflow:auto;">
    <RadzenTree @ref=tree AllowCheckBoxes="true" AllowCheckChildren=false @bind-CheckedValues=@CheckedValues Style="width: 100%; height: 160px" Data=@colCharacters>
        <RadzenTreeLevel TextProperty="CharacterDisplay" Expanded="@(data => true)" HasChildren="@(data => false)" />
    </RadzenTree>
</div>
<br />
<div class="rz-text-align-center">
    <RadzenButton Text="Add Characters and Attributes" ButtonStyle="ButtonStyle.Primary"
                  Click=@CloseDialog />
</div>
@code {
    [Parameter] public IEnumerable<SimpleCharacterSelector> colCharacters { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    RadzenTree tree;
    AIStoryBuildersService AIStoryBuildersService;

    IEnumerable<object> checkedValues;
    IEnumerable<object> CheckedValues
    {
        get => checkedValues;
        set
        {
            checkedValues = value;           
        }
    }

    protected override void OnInitialized()
    {
        AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
    }

    private void CloseDialog()
    {
        DialogReference.Close(CheckedValues);
    }
}
