@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@using static AIStoryBuilders.AI.OrchestratorMethods
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<style>
    .highlight {
        border: 2px solid blue; /* Change this to your desired highlight style */
        border-radius: 5px;
    }
</style>
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
    @if (!InEditMode)
    {
        <div onmouseover="this.classList.add('highlight')"
             onmouseout="this.classList.remove('highlight')">
            <div id="ParagraphDiv" @onclick="onClickParagraph">
                <span style="white-space: pre-wrap">@((MarkupString)objParagraph.ParagraphContent)</span>
            </div>
        </div>
    }
    else
    {
        @if (EnabledToolbar)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" Wrap="FlexWrap.NoWrap" Style="margin-bottom:10px">
                <RadzenSpeechToTextButton Change="@(args => OnSpeechCaptured(args, false, "TextToSpeech"))" />
                <RadzenButton Click="onClickAI" Icon="app_registration" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Medium" />
                <RadzenButton Click="onClickCharacter" Text="Characters" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />
                <RadzenButton Click="onClickLocation" Text="Location" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />
                <RadzenButton Click="onClickTimeline" Text="Timeline" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" />

                @if (Undoable)
                {
                    <RadzenButton Click="onClickUndo" Icon="undo" ButtonStyle="ButtonStyle.Dark" Size="ButtonSize.Medium" />
                }
                @if (Deleteable)
                {
                    <RadzenButton Click="onClickDelete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" />
                }
                @if (Addable)
                {
                    <RadzenButton Click="onClickAdd" Icon="note_add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" />
                }

                <RadzenSplitButton Icon="save" Click=@(args => onClickSave(args)) Text="Save" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium">
                    <ChildContent>
                        <RadzenSplitButtonItem Text="Autodetect Attributes" Value="Autodetect" />
                    </ChildContent>
                </RadzenSplitButton>

                @if (Closeable)
                {
                    <RadzenButton Click="onClickClose" Icon="exit_to_app" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium" />
                }
            </RadzenStack>
        }

        @if (!EnabledToolbar)
        {
            <div @onclick="onRadzenTextAreaClick">
                <span><h5>[Click here to add content]</h5></span>
            </div>
        }
        else
        {
            <RadzenTextArea @bind-Value="@objParagraph.ParagraphContent"
                            @onclick="onRadzenTextAreaClick"
                            MaxLength="5000"
                            Rows="12"
                            Style="width:100%;height:100%" />
        }

    }
}
@code {
    [Parameter] public EventCallback LoadParagraphs { get; set; }

    [Parameter] public Paragraph objParagraph { get; set; }
    [Parameter] public Chapter objChapter { get; set; }
    [Parameter] public List<Character> colCharacters { get; set; }
    [Parameter] public List<Location> colLocations { get; set; }
    [Parameter] public List<Timeline> colTimelines { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    SettingsService SettingsService;
    AIStoryBuildersTempService AIStoryBuildersTempService;

    bool EnabledToolbar = false;

    bool InEditMode = false;
    bool Deleteable = false;
    bool Addable = false;
    bool Closeable = true;
    bool InProgress = false;

    bool Undoable = false;
    string UndoCache = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // If this is a new Paragraph put it in Edit mode
            if (objParagraph.Id == -1)
            {
                InEditMode = true;
                Deleteable = false;
                Addable = false;
                Closeable = false;
            }

            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
            SettingsService = (SettingsService)ScopedServices.GetService(typeof(SettingsService));
            AIStoryBuildersTempService = (AIStoryBuildersTempService)ScopedServices.GetService(typeof(AIStoryBuildersTempService));

            EnabledToolbar = await IsToolbarEnabled();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    // Events

    private async Task onRadzenTextAreaClick()
    {
        EnabledToolbar = await IsToolbarEnabled();

        if (!EnabledToolbar)
        {
            var confirmResult = await dialogService.Alert("Editing Now Initialized. Try again.", "Editing", new AlertOptions() { Height = "25px", Width = "350px", ShowTitle = false, OkButtonText = "Ok" });

            EnabledToolbar = true;
            await SetToolbarEnabledToTrue();
        }
    }

    private async Task<bool> IsToolbarEnabled()
    {
        bool ToolBarIsEnabled = false;

        // Get colAIStoryBuildersTemp
        await AIStoryBuildersTempService.LoadTempAsync();
        // Get all elements
        Dictionary<string, string> colAIStoryBuildersTemp = AIStoryBuildersTempService.colAIStoryBuildersTemp;
        // Get "ToolbarEnabled"
        if (colAIStoryBuildersTemp.TryGetValue("ToolbarEnabled", out string value))
        {
            if (value == "true")
            {
                ToolBarIsEnabled = true;
            }
        }

        return ToolBarIsEnabled;
    }

    private async Task SetToolbarEnabledToTrue()
    {
        // Get colAIStoryBuildersTemp
        await AIStoryBuildersTempService.LoadTempAsync();
        // Get all elements except "ToolbarEnabled"
        Dictionary<string, string> colAIStoryBuildersTemp = AIStoryBuildersTempService.colAIStoryBuildersTemp;
        // Remove "ToolbarEnabled"
        colAIStoryBuildersTemp.Remove("ToolbarEnabled");
        // Add "ToolbarEnabled" set to true
        colAIStoryBuildersTemp.Add("ToolbarEnabled", "true");
        // Save colAIStoryBuildersTemp
        await AIStoryBuildersTempService.SaveTempAsync(colAIStoryBuildersTemp);
    }

    private async Task onClickParagraph()
    {
        // Compute Buttons
        Deleteable = (objParagraph.Id > -1);
        Addable = (objParagraph.Id > -1);

        InEditMode = true;

        // **** Un-indent the paragraph
        objParagraph.ParagraphContent = objParagraph.ParagraphContent.Replace("&nbsp;", "");
        objParagraph.ParagraphContent = objParagraph.ParagraphContent.Replace("<br />", "\n");
        StateHasChanged();

        await onRadzenTextAreaClick();
    }

    private void onClickClose()
    {
        // **** Indent the paragraph
        objParagraph = AIStoryBuildersService.AddParagraphIndenting(objParagraph);

        InEditMode = false;
    }

    private async Task onClickCharacter()
    {
        InEditMode = false;
        StateHasChanged();

        // Turn colCharacters into a list of strings
        var AllCharacterList = colCharacters.Select(c => c.CharacterName).ToList();

        // Turn objParagraph.Characters into a list of strings
        var SelectedCharacterList = objParagraph.Characters.Select(c => c.CharacterName).OrderBy(x => x).ToList();

        var EditStoryResult = await dialogService.OpenAsync(
         "Select Characters", ds =>
    @<CharacterSelector colCharacters="@AllCharacterList" SelectedCharacters="@SelectedCharacterList" DialogReference="ds">
    </CharacterSelector>
         , new DialogOptions() { Height = "350px", Width = "500px" });

        // Set objParagraph.Characters
        if (EditStoryResult != null)
        {
            objParagraph.Characters = new List<Character>();
            foreach (var character in EditStoryResult)
            {
                objParagraph.Characters.Add(new Character() { CharacterName = character });
            }
        }

        // **** Un-indent the paragraph
        var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
        objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

        InEditMode = true;
        StateHasChanged();
    }

    private async Task onClickLocation()
    {
        InEditMode = false;
        StateHasChanged();

        // Turn colLocations into a list of strings
        var AllLocationList = colLocations.OrderBy(x => x.LocationName).ToList();
        AllLocationList.Add(new Location() { Id = -1, LocationName = "" });

        // handle if location is null
        if (objParagraph.Location == null)
        {
            objParagraph.Location = new Location();
        }

        // Get SelectedLocation
        var SelectedLocation = objParagraph.Location;

        Location EditStoryResult = await dialogService.OpenAsync(
        "Select Location", ds =>
    @<LocationSelector colLocations="@AllLocationList" SelectedLocation="@SelectedLocation" DialogReference="ds">
    </LocationSelector>
        , new DialogOptions() { Height = "200px", Width = "500px" });

        // Set objParagraph.Location.LocationName to SelectedLocation
        if (EditStoryResult != null)
        {
            // Get the Location from the collection because the one returned from the dialog is not the same
            // and is missing the Descriptions
            objParagraph.Location = colLocations.Where(x => x.LocationName == EditStoryResult.LocationName).FirstOrDefault();
        }

        // **** Un-indent the paragraph
        var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
        objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

        InEditMode = true;
        StateHasChanged();
    }

    private async Task onClickTimeline()
    {
        InEditMode = false;
        StateHasChanged();

        // Turn colTimelines into a list of strings
        var AllTimelineList = colTimelines.Select(c => c.TimelineName).OrderBy(x => x).ToList();
        AllTimelineList.Add("");

        // handle if timeline is null
        if (objParagraph.Timeline == null)
        {
            objParagraph.Timeline = new Timeline();
        }

        // Get SelectedTimeline
        var SelectedTimeline = objParagraph.Timeline.TimelineName;

        var EditStoryResult = await dialogService.OpenAsync(
        "Select Timeline", ds =>
    @<TimelineSelector colTimelines="@AllTimelineList" SelectedTimeline="@SelectedTimeline" DialogReference="ds">
    </TimelineSelector>
        , new DialogOptions() { Height = "200px", Width = "500px" });

        // Set objParagraph.Timeline.TimelineName to SelectedTimeline
        if (EditStoryResult != null)
        {
            objParagraph.Timeline.TimelineName = EditStoryResult;
        }

        // **** Un-indent the paragraph
        var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
        objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

        InEditMode = true;
        StateHasChanged();
    }

    void OnSpeechCaptured(string speechValue, bool updateTextArea, string name)
    {
        objParagraph.ParagraphContent += speechValue;
    }

    private async Task onClickSave(RadzenSplitButtonItem item)
    {
        try
        {
            // Validate ParagraphContent
            if (objParagraph.ParagraphContent.Trim().Length < 1)
            {
                NotificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = "Paragraph content is required",
                            Duration = 4000

                        });
                return;
            }

            // **** Un-indent the paragraph
            objParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);

            // Save
            InEditMode = false;

            InProgress = true;
            StateHasChanged();

            // ********************************
            // **** Use AutoAttributeDetection?
            // ********************************
            if (item != null && item.Value == "Autodetect")
            {
                try
                {
                    // Initialize a collection for all Characters and Attributes
                    List<SimpleCharacterSelector> colAllCharactersAndAttributes = new List<SimpleCharacterSelector>();

                    // Notify starting of attribute detection
                    NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Summary = "Info",
                                Detail = "Calling ChatGPT to detect Attributes...",
                                Duration = 2000
                            });

                    // Detect all Characters in the Paragraph and ensure no null returns
                    List<Character> colAllCharactersInParagraph = await OrchestratorMethods.DetectCharacters(objParagraph) ?? new List<Character>();

                    // Filter new Characters not in the existing collection and ensure colCharacters is not null
                    List<Character> colNewCharactersInParagraph = colCharacters != null ?
    colAllCharactersInParagraph.Where(x => !colCharacters.Any(y => y.CharacterName == x.CharacterName)).ToList() : colAllCharactersInParagraph;

                    if (colNewCharactersInParagraph.Any())
                    {
                        NotificationService.Notify(new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Success,
                                    Summary = "Info",
                                    Detail = "Detecting attributes on new characters…",
                                    Duration = 2000
                                });

                        // Detect attributes for new Characters and handle nulls
                        List<SimpleCharacterSelector> colnewCharactersAndAttributes = await OrchestratorMethods.DetectCharacterAttributes(objParagraph, colNewCharactersInParagraph, "New Character") ?? new List<SimpleCharacterSelector>();

                        if (colnewCharactersAndAttributes.Any())
                        {
                            colAllCharactersAndAttributes.AddRange(colnewCharactersAndAttributes);
                        }
                    }

                    // Filter existing Characters in the Paragraph that are in the Characters collection
                    List<Character> colExistingCharactersInParagraph = colCharacters != null ?
    colCharacters.Where(x => colAllCharactersInParagraph.Any(y => y.CharacterName == x.CharacterName)).ToList() : new List<Character>();

                    if (colExistingCharactersInParagraph.Any())
                    {
                        NotificationService.Notify(new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Success,
                                    Summary = "Info",
                                    Detail = "Detecting attributes on existing characters…",
                                    Duration = 2000
                                });

                        // Detect attributes for existing Characters
                        List<SimpleCharacterSelector> colCharacterOutput = await OrchestratorMethods.DetectCharacterAttributes(objParagraph, colExistingCharactersInParagraph, "Existing Character") ?? new List<SimpleCharacterSelector>();

                        colAllCharactersAndAttributes.AddRange(colCharacterOutput);
                    }

                    // Handle dialog interaction with user
                    if (colAllCharactersAndAttributes.Any())
                    {
                        var EditStoryResult = await dialogService.OpenAsync("Select Character Attributes", ds =>
    @<CharacterAttributes colCharacters=@colAllCharactersAndAttributes DialogReference="ds">
    </CharacterAttributes>, new DialogOptions() { Height = "360px", Width = "500px" });

                        if (EditStoryResult != null)
                        {
                            foreach (SimpleCharacterSelector result in EditStoryResult)
                            {
                                var objCharacter = result.CharacterValue.ToString().Split('|');

                                var CharacterName = objCharacter[0].Replace("|", "").Replace("[", "").Replace("]", "");
                                var Action = objCharacter[1];
                                var description_type = objCharacter[2];
                                var description_text = objCharacter[3];

                                // Handle new Characters
                                if (Action == "New Character" && string.IsNullOrEmpty(description_type))
                                {
                                    var ExistingCharacter = colCharacters.FirstOrDefault(x => x.CharacterName == CharacterName);

                                    if (ExistingCharacter == null)
                                    {
                                        Character objNewCharacter = new Character
                                                {
                                                    CharacterName = CharacterName,
                                                    CharacterBackground = new List<CharacterBackground>()
                                                };
                                        colCharacters.Add(objNewCharacter);
                                        objParagraph.Characters.Add(objNewCharacter);
                                    }
                                }

                                // Handle new Attributes
                                if (!string.IsNullOrEmpty(description_type))
                                {
                                    var ExistingCharacter = colCharacters.FirstOrDefault(x => x.CharacterName == CharacterName);

                                    if (ExistingCharacter != null)
                                    {
                                        ExistingCharacter.CharacterBackground.Add(new CharacterBackground { Type = description_type, Description = description_text, Character = ExistingCharacter });
                                    }
                                }
                            }

                            // Save all the Characters
                            foreach (Character objCharacter in colCharacters)
                            {
                                var CharacterInParagraph = objParagraph.Characters.FirstOrDefault(x => x.CharacterName == objCharacter.CharacterName);
                                if (CharacterInParagraph != null)
                                {
                                    objCharacter.Story = objChapter.Story;
                                    await AIStoryBuildersService.AddUpdateCharacterAsync(objCharacter, objCharacter.CharacterName);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "An error occurred: " + ex.Message,
                                Duration = 4000
                            });
                }
            }

            if (objParagraph.Timeline == null)
            {
                objParagraph.Timeline = new Timeline();
            }

            if (objParagraph.Location == null)
            {
                objParagraph.Location = new Location();
            }

            await AIStoryBuildersService.UpdateParagraph(objChapter, objParagraph);

            // Reload the Paragraphs
            await LoadParagraphs.InvokeAsync();

            InProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private void onClickUndo()
    {
        try
        {
            InProgress = true;
            StateHasChanged();

            objParagraph.ParagraphContent = UndoCache;
            Undoable = false;

            // **** Un-indent the paragraph
            objParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);

            InProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task onClickAdd()
    {
        try
        {
            InEditMode = false;
            StateHasChanged();

            // **** Un-indent the paragraph
            objParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);

            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", $"Add Section above this Section",
    new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Add
                await AIStoryBuildersService.AddParagraph(objChapter, objParagraph);

                // Reload the Paragraphs
                await LoadParagraphs.InvokeAsync();

                StateHasChanged();
            }
            else
            {
                // **** Un-indent the paragraph
                var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
                objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

                InEditMode = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task onClickDelete()
    {
        try
        {
            InEditMode = false;
            StateHasChanged();

            // **** Un-indent the paragraph
            objParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);

            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", $"Delete Section",
      new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete
                await AIStoryBuildersService.DeleteParagraph(objChapter, objParagraph);

                // Reload the Paragraphs
                await LoadParagraphs.InvokeAsync();

                StateHasChanged();
            }
            else
            {
                // **** Un-indent the paragraph
                var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
                objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

                InEditMode = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task onClickAI()
    {
        try
        {
            InEditMode = false;
            StateHasChanged();

            string AIPrompt = "";

            // **** Un-indent the paragraph
            objParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);

            // Set NumberOfWords
            string NumberOfWords = SetNumberOfWords(objParagraph.ParagraphContent);

            // Display inline dialog to capture text
            AIPrompt AIPromptResult = await dialogService.OpenAsync("AI Prompt Instructions", ds =>
    @<ParagraphPrompt AIPromptText="@AIPrompt" SelectedNumberOfWords="@NumberOfWords" DialogReference="ds">
    </ParagraphPrompt>
    , new DialogOptions() { Height = "390px", Width = "600px" });

            if (AIPromptResult != null)
            {
                dialogService.Refresh();
                InProgress = true;
                StateHasChanged();

                // Get All Paragraphs In Chapter
                var colAllParagraphsInChapter = await AIStoryBuildersService.GetParagraphs(objChapter);

                // Limit to only Paragraphs that come before the current Paragraph
                var colParagraphsBeforeCurrent = colAllParagraphsInChapter.Where(x => x.Sequence < objParagraph.Sequence).ToList();

                // Get all existing Characters in the Paragraph that are in the Characters collection
                List<Character> colExistingCharactersInParagraph = colCharacters.Where(x => objParagraph.Characters.Any(y => y.CharacterName == x.CharacterName)).ToList();

                // ********************************
                // Create a objMasterStory object
                var objMasterStory = await AIStoryBuildersService.CreateMasterStory(objChapter, objParagraph, colExistingCharactersInParagraph, colParagraphsBeforeCurrent, AIPromptResult);

                // ********************************
                // **** Call ChatGPT
                // ********************************
                var NewParagraph = await OrchestratorMethods.WriteParagraph(objMasterStory, AIPromptResult, AIPromptResult.ModelId);

                // Save the current content of the Paragraph to the UndoCache
                UndoCache = objParagraph.ParagraphContent;
                Undoable = true;

                // Update objParagraph.ParagraphContent
                objParagraph.ParagraphContent = NewParagraph;

                InProgress = false;
                InEditMode = true;
                StateHasChanged();
            }
            else
            {
                // **** Un-indent the paragraph
                var UpdatedParagraph = AIStoryBuildersService.RemoveParagraphIndenting(objParagraph);
                objParagraph.ParagraphContent = UpdatedParagraph.ParagraphContent;

                InEditMode = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            InProgress = false;
            StateHasChanged();

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    // Utility

    private string SetNumberOfWords(string paragraphContent)
    {
        // Get the number of words in the paragraph
        int countOfWords = paragraphContent.Split(' ').Length;

        // Determine the NumberOfWords based on the countOfWords
        if (countOfWords < 10)
        {
            return "200";
        }
        if (countOfWords < 20)
        {
            return "20";
        }
        if (countOfWords < 50)
        {
            return "50";
        }
        if (countOfWords < 100)
        {
            return "100";
        }
        if (countOfWords < 200)
        {
            return "200";
        }
        if (countOfWords < 300)
        {
            return "300";
        }
        if (countOfWords < 500)
        {
            return "500";
        }
        if (countOfWords < 800)
        {
            return "800";
        }
        return "1000"; // Default case for 800 or more words
    }
}