@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
<RadzenRow Gap="1rem">
    <RadzenColumn Size="12" SizeSM="12">
        <RadzenStack>
            <RadzenFormField Text="Description:" Variant=Variant.Outlined>
                <RadzenTextArea Rows="2" MaxLength="100" @bind-Value="@objCharacterBackground.Description" class="w-100" />
            </RadzenFormField>
            <RadzenFormField Text="Timeline:" Variant=Variant.Outlined>
                <RadzenDropDown Data=@colTimelineNames @bind-Value="@SelectedTimeline" />
            </RadzenFormField>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="CharacterBackgroundSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        @if (@objCharacterBackground.Id > 0)
        {
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="CharacterBackgroundDelete" />
        } 
    </div>
</div>
@code {
    [Parameter] public CharacterBackground objCharacterBackground { get; set; }
    [Parameter] public Story objStory { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<string> colDescriptions = new List<string>();
    List<Timeline> colTimelines = new List<Timeline>();
    List<string> colTimelineNames = new List<string>();
    string SelectedTimeline = "";

    protected override void OnInitialized()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            // Load Timelines
            colTimelines = AIStoryBuildersService.GetTimelines(objStory);
            colTimelineNames = colTimelines.Select(x => x.TimelineName).ToList();
            colTimelineNames.Add("");

            if (objCharacterBackground.Id > 0)
            {
                if (objCharacterBackground.Timeline != null)
                {
                    SelectedTimeline = objCharacterBackground.Timeline.TimelineName;
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private void CharacterBackgroundSave()
    {
        // Always remove any pipe (|) characters
        objCharacterBackground.Description = objCharacterBackground.Description.Replace("|", "");
        objCharacterBackground.Timeline = colTimelines.Where(x => x.TimelineName == SelectedTimeline).FirstOrDefault();
        DialogService.Close(objCharacterBackground);
    }

    private void CharacterBackgroundDelete()
    {
        // Mark the id 0 to indicate a delete
        objCharacterBackground.Id = 0;
        DialogService.Close(objCharacterBackground);
    }
}