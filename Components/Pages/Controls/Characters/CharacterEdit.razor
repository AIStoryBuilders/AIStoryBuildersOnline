@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@inherits OwningComponentBase
@inject NotificationService NotificationService
@inject DialogService DialogService
@if (@InProgress)
{
    <div class="rz-m-10">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}
else
{
<div style="height:400px; overflow-y: scroll;border-width:0px">
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeSM="12">
            <RadzenStack>
                <RadzenFormField Text="Character Name:" Variant=Variant.Outlined>
                    <RadzenTextBox @bind-Value="@objCharacter.CharacterName" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="8" SizeSM="8">
            <RadzenStack>
                <RadzenFormField Text="Background Type:" Variant=Variant.Outlined>
                    <RadzenDropDown Data=@colTypes @bind-Value="@strType" Change="OnTypeChanged" />
                </RadzenFormField>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="4" SizeSM="4">
            <RadzenStack>
                <RadzenButton Text="Add Background" ButtonStyle="ButtonStyle.Secondary"
                              Click="AddBackground"
                              Style="margin-top: 10px; width: 150px" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <br />
    <RadzenDataList Data="@colCharacterBackground" TItem="CharacterBackground">
        <Template Context="characterbackground">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="2">
                        <RadzenButton Text="Edit" Click=@(() => EditBackground(characterbackground))
                                      ButtonStyle="ButtonStyle.Light" Style="width: 75px;height: 20px" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenText TextStyle=TextStyle.Body2>@(characterbackground.Description)</RadzenText>
                            @if (characterbackground.Timeline != null)
                        {
                            <RadzenText TextStyle=TextStyle.Subtitle2>@(characterbackground.Timeline.TimelineName)</RadzenText>
                        }
                    </RadzenColumn>
                </RadzenRow>
        </Template>
    </RadzenDataList>
</div>
<br />
<br />
<div class="row">
    <div class="col">
        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                      Click="CharacterSave"
                      Style="margin-bottom: 10px; width: 150px" />&nbsp;&nbsp;
        @if (objCharacter.Id > 0)
        {
            <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger"
                          Click="CharacterDelete" />
        }
    </div>
</div>
}
@code {
    [Parameter] public Character objCharacter { get; set; }
    [Parameter] public DialogService DialogReference { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    string OriginalCharacterName = "";
    IEnumerable<CharacterBackground> colCharacterBackground = new List<CharacterBackground>();
    List<string> colTypes = new List<string>();
    string strType = "Appearance";
    bool InProgress = false;

    protected override void OnInitialized()
    {
        AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
        OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

        // Add colTypes
        colTypes = new List<string>()
                                {
            "Appearance",
            "Goals",
            "History",
            "Aliases",
            "Facts"
                                };

        colCharacterBackground = objCharacter.CharacterBackground.Where(x => x.Type == strType);

        OriginalCharacterName = objCharacter.CharacterName;
    }

    private async Task CharacterSave()
    {
        try
        {
            if (objCharacter.CharacterName != null)
            {
                if (objCharacter.CharacterName.Length < 1)
                {
                    NotificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Error",
                                Detail = "Character Name is required",
                                Duration = 4000
                            });

                    return;
                }
                else
                {
                    // Always remove any pipe (|) and [ and ] characters
                    objCharacter.CharacterName = objCharacter.CharacterName.Replace("|", "");
                    objCharacter.CharacterName = objCharacter.CharacterName.Replace("[", "");
                    objCharacter.CharacterName = objCharacter.CharacterName.Replace("]", "");

                    InProgress = true;
                    StateHasChanged();

                    // If OriginalCharacterName is null, then this is a new Character
                    if (OriginalCharacterName == null)
                    {
                        // Set the OriginalCharacterName to the CharacterName
                        OriginalCharacterName = objCharacter.CharacterName;
                    }

                    // Save to the database
                    await AIStoryBuildersService.AddUpdateCharacterAsync(objCharacter, OriginalCharacterName);

                    InProgress = false;
                    StateHasChanged();

                    // Determine if the Character Name changed
                    if (OriginalCharacterName != objCharacter.CharacterName)
                    {
                        // Ask for confirmation:
                        var confirmResult = await DialogService.Confirm("Are you sure? The entire story will be updated to update the Character Name.", "Character Name Change",
                              new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

                        if (confirmResult.HasValue && confirmResult.Value)
                        {
                            InProgress = true;
                            StateHasChanged();

                            // Update the Character Name in the Story
                            AIStoryBuildersService.UpdateCharacterName(objCharacter, OriginalCharacterName);

                            InProgress = false;
                            StateHasChanged();
                        }
                    }

                    DialogService.Close(null);
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Character Name is required",
                        Duration = 4000
                    });

                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });

            InProgress = false;
            StateHasChanged();
        }
    }

    private async Task CharacterDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await DialogService.Confirm("Are you sure?", "Delete Character",
        new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                InProgress = true;
                StateHasChanged();

                // Delete
                AIStoryBuildersService.DeleteCharacter(objCharacter, OriginalCharacterName);

                InProgress = false;
                StateHasChanged();

                DialogService.Close(null);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });

            InProgress = false;
            StateHasChanged();
        }
    }

    private void OnTypeChanged()
    {
        colCharacterBackground = objCharacter.CharacterBackground.Where(x => x.Type == strType);

        if (DialogReference != null)
        {
            DialogReference.Refresh();
        }
    }

    private async Task AddBackground()
    {
        try
        {
            CharacterBackground NewCharacterBackground = new CharacterBackground();
            NewCharacterBackground.Id = -1;
            NewCharacterBackground.Type = strType;

            await EditBackground(NewCharacterBackground);

        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task EditBackground(CharacterBackground paramCharacterBackground)
    {
        try
        {
            var EditStoryResult = await DialogService.OpenAsync(
                $"Edit Character Background  - {strType}", ds =>
                @<CharacterBackgroundEdit objCharacterBackground=paramCharacterBackground objStory="objCharacter.Story" DialogReference="ds">
                </CharacterBackgroundEdit>
                , new DialogOptions() { Height = "300px", Width = "500px" });

            if (EditStoryResult != null)
            {
                // Update existing CharacterBackground
                if (paramCharacterBackground.Id > 0)
                {
                    // Find the CharacterBackground in the list
                    var objCharacterBackground = objCharacter.CharacterBackground.Where(x => x.Id == paramCharacterBackground.Id).FirstOrDefault();

                    if (objCharacterBackground != null)
                    {
                        objCharacterBackground.Description = paramCharacterBackground.Description;
                        objCharacterBackground.Timeline = paramCharacterBackground.Timeline;
                    }
                }
                else if (paramCharacterBackground.Id == -1)
                {
                    // Add new CharacterBackground
                    int intMaxId = 0;
                    if (objCharacter.CharacterBackground.Count > 0)
                    {
                        intMaxId = objCharacter.CharacterBackground.Max(x => x.Id);
                    }

                    paramCharacterBackground.Id = intMaxId + 1;

                    objCharacter.CharacterBackground.Add(paramCharacterBackground);
                }
                else if (paramCharacterBackground.Id == 0)
                {
                    // Delete CharacterBackground
                    objCharacter.CharacterBackground.Remove(paramCharacterBackground);
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }
}