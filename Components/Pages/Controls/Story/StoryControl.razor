@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuildersOnline.Components.Pages.Controls;
@using AIStoryBuildersOnline.Components.Pages.Controls.AI;
@using AIStoryBuildersOnline.Components.Pages.Controls.Chapters;
@using AIStoryBuildersOnline.Components.Pages.Controls.Characters
@using AIStoryBuildersOnline.Components.Pages.Controls.Locations;
@using AIStoryBuildersOnline.Components.Pages.Controls.Story
@using AIStoryBuildersOnline.Components.Pages.Controls.Timelines;
@using AIStoryBuilders.Services;
@using System.IO.Compression;
@using static AIStoryBuilders.AI.OrchestratorMethods
@inherits OwningComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject DialogService dialogService
@inject NotificationService NotificationService
@inject AIStoryBuildersStoryService AIStoryBuildersStoryService
@implements IDisposable
<PageTitle>@objStory.Title</PageTitle>

<RadzenTabs Change=@OnTabChange TabPosition=TabPosition.Top RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Details">
            <StoryEdit @ref="ctrlStoryEdit" objStory="objStory" StoryUpdated="SaveStory" StoryDeleted="DeleteStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Timelines">
            <TimelinesControl @ref="timelinesControl" objStory="objStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Locations">
            <LocationsControl @ref="locationsControl" objStory="objStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Characters">
            <CharactersEdit @ref="CtrlCharactersEdit" objStory="objStory" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Chapters">
            <ChaptersControl @ref="chaptersControl" objStory="objStory" />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    [Parameter] public Story objStory { get; set; }

    private IDisposable registration;
    StoryEdit ctrlStoryEdit;
    CharactersEdit CtrlCharactersEdit;
    TimelinesControl timelinesControl;
    LocationsControl locationsControl;
    ChaptersControl chaptersControl;
    // AIControl aIControl;

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;

    List<Character> colCharacters = new List<Character>();

    private DotNetObjectReference<StoryControl> objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("setupBeforeUnload", objRef);

        await Task.Run(() =>
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));

            OrchestratorMethods.ReadTextEvent += OrchestratorMethods_ReadTextEvent;
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                Navigation.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        // Get the base URL
        string baseUrl = Navigation.BaseUri;

        // Detect that user is going to counter page
        if (context.TargetLocation != baseUrl)
        {
            // Zip up any files and store in LocalStorage
            string BasePath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIStoryBuilders";
            string ZipFileBase64String = CreateZipFile($"{BasePath}/{objStory.Title}");

            Task.Run(async () => await AIStoryBuildersStoryService.UpdateStoryAsync(new AIStoryBuildersStory
                {
                    Id = objStory.Id,
                    Title = objStory.Title,
                    Style = objStory.Style,
                    Theme = objStory.Theme,
                    Synopsis = objStory.Synopsis,
                    ZipFile = ZipFileBase64String
                }));
        }

        return ValueTask.CompletedTask;
    }

    [JSInvokable]
    public async Task HandleBeforeUnload()
    {
        // Zip up any files and store in LocalStorage
        string BasePath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIStoryBuilders";
        string ZipFileBase64String = CreateZipFile($"{BasePath}/{objStory.Title}");

        await AIStoryBuildersStoryService.UpdateStoryAsync(new AIStoryBuildersStory
            {
                Id = objStory.Id,
                Title = objStory.Title,
                Style = objStory.Style,
                Theme = objStory.Theme,
                Synopsis = objStory.Synopsis,
                ZipFile = ZipFileBase64String
            });
    }

    private async Task SaveStory()
    {
        try
        {
            // Update the Story
            await AIStoryBuildersService.UpdateStory(objStory);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Story",
                    Detail = "Updated!",
                    Duration = 2000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task DeleteStory()
    {
        try
        {
            // Delete the Story from the database
            await AIStoryBuildersService.DeleteStory(objStory.Title);

            dialogService.Close(null);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task OnTabChange(int index)
    {
        switch (index)
        {
            case 0:
                // Story
                break;
            case 1:
                // Timelines
                await timelinesControl.LoadTimelines(objStory);
                break;
            case 2:
                // Locations
                await locationsControl.LoadLocations(objStory);
                break;
            case 3:
                // Characters
                await CtrlCharactersEdit.LoadCharacters(objStory);
                break;
            case 4:
                // Chapters
                await chaptersControl.LoadChapters(objStory, null);
                break;
            case 5:
                // AI
                break;
            default:
                break;
        }
    }

    // Events

    private void OrchestratorMethods_ReadTextEvent(object sender, EventArgs e)
    {
        ReadTextEventArgs ReadTextEventArguments = (ReadTextEventArgs)e;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Info",
                Detail = ReadTextEventArguments.Message,
                Duration = 4000
            });
    }

    // Utility

    public string CreateZipFile(string storyPath)
    {
        string strZipFile = "";

        // Create _TempZip
        string tempZipPath = $"{Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)}/AIStoryBuilders/_TempZip";

        if (!Directory.Exists(tempZipPath))
        {
            Directory.CreateDirectory(tempZipPath);
        }
        else
        {
            // Delete the temp directory
            Directory.Delete(tempZipPath, true);

            // Create the directory if it doesn't exist
            if (!Directory.Exists(tempZipPath))
            {
                Directory.CreateDirectory(tempZipPath);
            }
        }

        string zipFilePath = $"{tempZipPath}/ZipFile.zip";

        // Create a zip file from the directory
        ZipFile.CreateFromDirectory(storyPath, zipFilePath);

        // Read the Zip file into a byte array
        byte[] zipFileContents = File.ReadAllBytes(zipFilePath);

        // Convert ZipFile byte array to Base64 string
        strZipFile = Convert.ToBase64String(zipFileContents);

        return strZipFile;
    }

    public void Dispose()
    {
        objRef?.Dispose();
        OrchestratorMethods.ReadTextEvent -= OrchestratorMethods_ReadTextEvent;
    }
}