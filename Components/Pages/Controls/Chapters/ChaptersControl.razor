@using AIStoryBuilders.AI
@using AIStoryBuilders.Model;
@using AIStoryBuilders.Models;
@using AIStoryBuilders.Services;
@using AIStoryBuildersOnline.Components.Pages.Controls.Paragraphs;
@inherits OwningComponentBase
@inject DialogService dialogService
@inject NotificationService NotificationService
<style>
    .rz-panel-titlebar {
        flex-direction: row-reverse;
        justify-content: left;
    }</style>
<RadzenPanel AllowCollapse="true" Style="width: 100%;">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">
            &nbsp;&nbsp;<b>Edit Chapter</b>
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <br />
        <div class="row">
            <div class="col">
                <RadzenButton Text="New Chapter" ButtonStyle="ButtonStyle.Success"
                              Click=@(() => NewChapter()) />&nbsp;&nbsp;
                <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Success"
                              Click="ChapterSave" />&nbsp;&nbsp;
                <RadzenButton Click="onClickAdd" Icon="note_add" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" />
                <span>&nbsp; </span>
                @if (!OnlyChapter)
                {
                    <RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="ChapterDelete" />
                }
            </div>
        </div>
        <br />
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeSM="12">
                <RadzenStack>
                    <RadzenFormField Text="Chapters:" Variant="@variant">
                        <RadzenDropDown Data=@colChapters @bind-Value="@SelectedChapter" TextProperty="ChapterName" Change="OnChapterChanged" />
                    </RadzenFormField>
                    <RadzenFormField Text="Synopsis:" Variant="@variant">
                        <RadzenTextArea @bind-Value="@SelectedChapter.Synopsis" MaxLength="1000" Rows="2" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
</RadzenPanel>
<RadzenDataList @ref=objDatalist AllowVirtualization=false Style="width:100%;height:100%;overflow:auto;"
                WrapItems=false AllowPaging=false
                Data="@colParagraphs" TItem="Paragraph">
    <Template Context="paragraph">
        <ParagraphEdit LoadParagraphs="@LoadParagraphsHandler" objParagraph=@paragraph objChapter=@SelectedChapter colCharacters=@colAllCharacters colLocations=@colAllLocations colTimelines=@colAllTimelines />
    </Template>
</RadzenDataList>
@code {
    [Parameter] public Story objStory { get; set; }
    [Parameter] public bool InitialLoad { get; set; }

    AIStoryBuildersService AIStoryBuildersService;
    OrchestratorMethods OrchestratorMethods;
    AIStoryBuildersTempService AIStoryBuildersTempService;

    RadzenDataList<Paragraph> objDatalist;
    Variant variant = Variant.Outlined;

    List<Chapter> colChapters = new List<Chapter>();
    List<Paragraph> colParagraphs = new List<Paragraph>();
    Chapter SelectedChapter = new Chapter();

    List<Character> colAllCharacters { get; set; }
    List<Location> colAllLocations { get; set; }
    List<Timeline> colAllTimelines { get; set; }

    bool OnlyChapter = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            AIStoryBuildersService = (AIStoryBuildersService)ScopedServices.GetService(typeof(AIStoryBuildersService));
            OrchestratorMethods = (OrchestratorMethods)ScopedServices.GetService(typeof(OrchestratorMethods));
            AIStoryBuildersTempService = (AIStoryBuildersTempService)ScopedServices.GetService(typeof(AIStoryBuildersTempService));

            await ClearToolbarEnabled();

            await LoadChapters(objStory, null);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = ex.Message,
                        Duration = 4000
                    });
        }
    }

    private async Task ClearToolbarEnabled()
    {
        // Get colAIStoryBuildersTemp
        await AIStoryBuildersTempService.LoadTempAsync();
        // Get all elements 
        Dictionary<string, string> colAIStoryBuildersTemp = AIStoryBuildersTempService.colAIStoryBuildersTemp;
        // Remove "ToolbarEnabled"
        colAIStoryBuildersTemp.Remove("ToolbarEnabled");
        // Add "ToolbarEnabled" set to false
        colAIStoryBuildersTemp.Add("ToolbarEnabled", "false");
        // Save colAIStoryBuildersTemp
        await AIStoryBuildersTempService.SaveTempAsync(colAIStoryBuildersTemp);
    }

    public async Task LoadChapters(Story paramStory, string paramSelectedChapter)
    {
        colChapters = await AIStoryBuildersService.GetChapters(paramStory);

        if (colChapters.Count > 0)
        {
            if (paramSelectedChapter != null)
            {
                // Put in a space after the word Chapter
                paramSelectedChapter = paramSelectedChapter.Insert(7, " ");

                // Select the SelectedChapter chapter in the dropdown
                SelectedChapter = colChapters.Where(x => x.ChapterName == paramSelectedChapter).FirstOrDefault();
            }
            else
            {
                // Select the first chapter in the dropdown
                SelectedChapter = colChapters.FirstOrDefault();
            }

            if (SelectedChapter != null)
            {
                await LoadParagraphs(SelectedChapter);
            }
        }
    }

    public async Task LoadParagraphs(Chapter paramChapter)
    {
        colParagraphs = new List<Paragraph>();

        if (objDatalist != null)
        {
            await objDatalist.Reload();
            dialogService.Refresh();
        }

        List<Paragraph> colTempParagraphs = new List<Paragraph>();

        // Load colAllCharacters
        colAllCharacters = await AIStoryBuildersService.GetCharacters(objStory);

        // Load colAllLocations
        colAllLocations = await AIStoryBuildersService.GetLocations(objStory);

        // Load colAllTimelines
        colAllTimelines = await AIStoryBuildersService.GetTimelines(objStory);

        // Load colParagraphs
        colTempParagraphs = await AIStoryBuildersService.GetParagraphs(paramChapter);

        // **** Indent the paragraphs
        colTempParagraphs = AIStoryBuildersService.AddParagraphIndenting(colTempParagraphs);

        // *******************
        // Add a blank paragraph to the end of the Paragraphs collection
        var objParagraph = new Paragraph();
        objParagraph.Id = -1; // So we know it is new
        objParagraph.Chapter = paramChapter;
        objParagraph.Sequence = colTempParagraphs.Count + 1;
        objParagraph.ParagraphContent = " ";

        var LastParagraph = colTempParagraphs.LastOrDefault();

        if (LastParagraph != null)
        {
            var LastParagraphCharacters = LastParagraph.Characters;

            if (LastParagraphCharacters != null)
            {
                objParagraph.Characters = LastParagraphCharacters;
            }
            else
            {
                objParagraph.Characters = new List<Character>();
            }
        }

        if (LastParagraph != null)
        {
            var LastParagraphTimeline = LastParagraph.Timeline;

            if (LastParagraphTimeline != null)
            {
                objParagraph.Timeline = LastParagraphTimeline;
            }
            else
            {
                objParagraph.Timeline = new Timeline();
            }
        }

        if (LastParagraph != null)
        {
            var LastParagraphLocation = LastParagraph.Location;

            if (LastParagraphLocation != null)
            {
                objParagraph.Location = LastParagraphLocation;
            }
            else
            {
                objParagraph.Location = new Location();
            }
        }

        colTempParagraphs.Add(objParagraph);

        colParagraphs = new List<Paragraph>(colTempParagraphs);

        if (objDatalist != null)
        {
            await objDatalist.Reload();
            dialogService.Refresh();
        }

        if (colChapters.Count == 1)
        {
            OnlyChapter = true;
        }
        else
        {
            OnlyChapter = false;
        }
    }

    private async Task NewChapter()
    {
        try
        {
            var newChapter = new Chapter();
            newChapter.Id = -1; // So we know it is new
            newChapter.Story = objStory;

            // Compute the next Chapter Number
            int NewChapterNumber = 1;
            if (colChapters.Count > 0)
            {
                NewChapterNumber = colChapters.Count + 1;
            }

            string strChapterName = "Chapter" + NewChapterNumber.ToString();

            var EditStoryResult = await dialogService.OpenAsync(
        strChapterName.Insert(7, " "), ds =>
    @<ChaptersEdit objChapter=@newChapter ChapterName=@strChapterName DialogReference="ds">
    </ChaptersEdit>
    , new DialogOptions() { Height = "300px", Width = "650px" });

            await LoadChapters(objStory, EditStoryResult);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ChapterSave()
    {
        try
        {
            // Update the chapter
            await AIStoryBuildersService.UpdateChapterAsync(SelectedChapter);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Update",
                    Detail = "Saved",
                    Duration = 2000
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task onClickAdd()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", $"Add new Chapter before this Chapter",
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                int NewChapterNumber = SelectedChapter.Sequence;
                string strNewChapterName = "Chapter" + NewChapterNumber.ToString();

                // First rename the existing chapters to create space for the new Chapter
                await AIStoryBuildersService.RestructureChapters(SelectedChapter, RestructureType.Add);

                // Create the new chapter
                var newChapter = new Chapter();
                newChapter.Id = -1; // So we know it is new
                newChapter.Sequence = NewChapterNumber;
                newChapter.Story = objStory;
                newChapter.ChapterName = strNewChapterName;
                newChapter.Synopsis = "New Chapter";

                await AIStoryBuildersService.AddChapterAsync(newChapter);

                // Reload the chapters
                await LoadChapters(objStory, null);

                // Set the SelectedChapter
                var NewChapterName = "Chapter " + NewChapterNumber.ToString();
                SelectedChapter = colChapters.Where(x => x.ChapterName == NewChapterName).FirstOrDefault();

                StateHasChanged();

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "New Chapter",
                        Detail = "Created",
                        Duration = 2000
                    });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task ChapterDelete()
    {
        try
        {
            // Ask for confirmation:
            var confirmResult = await dialogService.Confirm("Are you sure?", $"Delete {SelectedChapter.ChapterName}?",
                  new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmResult.HasValue && confirmResult.Value)
            {
                // Delete
                await AIStoryBuildersService.DeleteChapter(SelectedChapter);

                // Rename the remaining chapters 
                await AIStoryBuildersService.RestructureChapters(SelectedChapter, RestructureType.Delete);

                // Find the previous chapter
                var PreviousChapter = colChapters.Where(x => x.ChapterName != SelectedChapter.ChapterName).LastOrDefault();

                // Reload the chapters
                await LoadChapters(objStory, null);

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task OnChapterChanged()
    {
        await LoadParagraphs(SelectedChapter);
    }

    private async Task LoadParagraphsHandler()
    {
        await LoadParagraphs(SelectedChapter);
    }
}